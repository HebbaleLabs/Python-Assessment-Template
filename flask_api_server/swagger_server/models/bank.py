# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Bank(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, version: int=None, bank_name: str=None):  # noqa: E501
        """Bank - a model defined in Swagger

        :param id: The id of this Bank.  # noqa: E501
        :type id: str
        :param version: The version of this Bank.  # noqa: E501
        :type version: int
        :param bank_name: The bank_name of this Bank.  # noqa: E501
        :type bank_name: str
        """
        self.swagger_types = {
            'id': str,
            'version': int,
            'bank_name': str
        }

        self.attribute_map = {
            'id': '_id',
            'version': 'version',
            'bank_name': 'bank_name'
        }

        self._id = id
        self._version = version
        self._bank_name = bank_name

    @classmethod
    def from_dict(cls, dikt) -> 'Bank':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Bank of this Bank.  # noqa: E501
        :rtype: Bank
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Bank.


        :return: The id of this Bank.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Bank.


        :param id: The id of this Bank.
        :type id: str
        """

        self._id = id

    @property
    def version(self) -> int:
        """Gets the version of this Bank.


        :return: The version of this Bank.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this Bank.


        :param version: The version of this Bank.
        :type version: int
        """

        self._version = version

    @property
    def bank_name(self) -> str:
        """Gets the bank_name of this Bank.


        :return: The bank_name of this Bank.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name: str):
        """Sets the bank_name of this Bank.


        :param bank_name: The bank_name of this Bank.
        :type bank_name: str
        """
        if bank_name is None:
            raise ValueError("Invalid value for `bank_name`, must not be `None`")  # noqa: E501
        if bank_name is not None and len(bank_name) > 50:
            raise ValueError("Invalid value for `bank_name`, length must be less than or equal to `50`")  # noqa: E501

        self._bank_name = bank_name
