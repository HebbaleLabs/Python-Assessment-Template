# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.customer_category import CustomerCategory  # noqa: F401,E501
from swagger_server.models.metadata import Metadata  # noqa: F401,E501
from swagger_server import util


class CustomerCategoryResultsObject(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, customer_category: List[CustomerCategory]=None, metadata: Metadata=None):  # noqa: E501
        """CustomerCategoryResultsObject - a model defined in Swagger

        :param customer_category: The customer_category of this CustomerCategoryResultsObject.  # noqa: E501
        :type customer_category: List[CustomerCategory]
        :param metadata: The metadata of this CustomerCategoryResultsObject.  # noqa: E501
        :type metadata: Metadata
        """
        self.swagger_types = {
            'customer_category': List[CustomerCategory],
            'metadata': Metadata
        }

        self.attribute_map = {
            'customer_category': 'customerCategory',
            'metadata': 'metadata'
        }

        self._customer_category = customer_category
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'CustomerCategoryResultsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomerCategoryResultsObject of this CustomerCategoryResultsObject.  # noqa: E501
        :rtype: CustomerCategoryResultsObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_category(self) -> List[CustomerCategory]:
        """Gets the customer_category of this CustomerCategoryResultsObject.


        :return: The customer_category of this CustomerCategoryResultsObject.
        :rtype: List[CustomerCategory]
        """
        return self._customer_category

    @customer_category.setter
    def customer_category(self, customer_category: List[CustomerCategory]):
        """Sets the customer_category of this CustomerCategoryResultsObject.


        :param customer_category: The customer_category of this CustomerCategoryResultsObject.
        :type customer_category: List[CustomerCategory]
        """

        self._customer_category = customer_category

    @property
    def metadata(self) -> Metadata:
        """Gets the metadata of this CustomerCategoryResultsObject.


        :return: The metadata of this CustomerCategoryResultsObject.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Metadata):
        """Sets the metadata of this CustomerCategoryResultsObject.


        :param metadata: The metadata of this CustomerCategoryResultsObject.
        :type metadata: Metadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata
