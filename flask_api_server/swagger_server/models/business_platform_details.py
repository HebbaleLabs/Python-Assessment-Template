# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BusinessPlatformDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, version: int=None, month_code: str=None, year_code: int=None, total_amount: float=None):  # noqa: E501
        """BusinessPlatformDetails - a model defined in Swagger

        :param id: The id of this BusinessPlatformDetails.  # noqa: E501
        :type id: str
        :param version: The version of this BusinessPlatformDetails.  # noqa: E501
        :type version: int
        :param month_code: The month_code of this BusinessPlatformDetails.  # noqa: E501
        :type month_code: str
        :param year_code: The year_code of this BusinessPlatformDetails.  # noqa: E501
        :type year_code: int
        :param total_amount: The total_amount of this BusinessPlatformDetails.  # noqa: E501
        :type total_amount: float
        """
        self.swagger_types = {
            'id': str,
            'version': int,
            'month_code': str,
            'year_code': int,
            'total_amount': float
        }

        self.attribute_map = {
            'id': '_id',
            'version': 'version',
            'month_code': 'month_code',
            'year_code': 'year_code',
            'total_amount': 'total_amount'
        }

        self._id = id
        self._version = version
        self._month_code = month_code
        self._year_code = year_code
        self._total_amount = total_amount

    @classmethod
    def from_dict(cls, dikt) -> 'BusinessPlatformDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BusinessPlatformDetails of this BusinessPlatformDetails.  # noqa: E501
        :rtype: BusinessPlatformDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BusinessPlatformDetails.


        :return: The id of this BusinessPlatformDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BusinessPlatformDetails.


        :param id: The id of this BusinessPlatformDetails.
        :type id: str
        """

        self._id = id

    @property
    def version(self) -> int:
        """Gets the version of this BusinessPlatformDetails.


        :return: The version of this BusinessPlatformDetails.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this BusinessPlatformDetails.


        :param version: The version of this BusinessPlatformDetails.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def month_code(self) -> str:
        """Gets the month_code of this BusinessPlatformDetails.


        :return: The month_code of this BusinessPlatformDetails.
        :rtype: str
        """
        return self._month_code

    @month_code.setter
    def month_code(self, month_code: str):
        """Sets the month_code of this BusinessPlatformDetails.


        :param month_code: The month_code of this BusinessPlatformDetails.
        :type month_code: str
        """
        allowed_values = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"]  # noqa: E501
        if month_code not in allowed_values:
            raise ValueError(
                "Invalid value for `month_code` ({0}), must be one of {1}"
                .format(month_code, allowed_values)
            )

        self._month_code = month_code

    @property
    def year_code(self) -> int:
        """Gets the year_code of this BusinessPlatformDetails.


        :return: The year_code of this BusinessPlatformDetails.
        :rtype: int
        """
        return self._year_code

    @year_code.setter
    def year_code(self, year_code: int):
        """Sets the year_code of this BusinessPlatformDetails.


        :param year_code: The year_code of this BusinessPlatformDetails.
        :type year_code: int
        """
        if year_code is None:
            raise ValueError("Invalid value for `year_code`, must not be `None`")  # noqa: E501
        if year_code is not None and year_code < 2000:  # noqa: E501
            raise ValueError("Invalid value for `year_code`, must be a value greater than or equal to `2000`")  # noqa: E501

        self._year_code = year_code

    @property
    def total_amount(self) -> float:
        """Gets the total_amount of this BusinessPlatformDetails.


        :return: The total_amount of this BusinessPlatformDetails.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount: float):
        """Sets the total_amount of this BusinessPlatformDetails.


        :param total_amount: The total_amount of this BusinessPlatformDetails.
        :type total_amount: float
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")  # noqa: E501

        self._total_amount = total_amount
