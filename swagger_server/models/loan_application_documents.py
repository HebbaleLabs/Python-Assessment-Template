# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LoanApplicationDocuments(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, loan_application_id: str=None, document_id: str=None, digio_doc_id: str=None, document_name: str=None, partner_doc: str=None, partner_pan: str=None, partner_mobile: str=None, esign_status: str=None):  # noqa: E501
        """LoanApplicationDocuments - a model defined in Swagger

        :param loan_application_id: The loan_application_id of this LoanApplicationDocuments.  # noqa: E501
        :type loan_application_id: str
        :param document_id: The document_id of this LoanApplicationDocuments.  # noqa: E501
        :type document_id: str
        :param digio_doc_id: The digio_doc_id of this LoanApplicationDocuments.  # noqa: E501
        :type digio_doc_id: str
        :param document_name: The document_name of this LoanApplicationDocuments.  # noqa: E501
        :type document_name: str
        :param partner_doc: The partner_doc of this LoanApplicationDocuments.  # noqa: E501
        :type partner_doc: str
        :param partner_pan: The partner_pan of this LoanApplicationDocuments.  # noqa: E501
        :type partner_pan: str
        :param partner_mobile: The partner_mobile of this LoanApplicationDocuments.  # noqa: E501
        :type partner_mobile: str
        :param esign_status: The esign_status of this LoanApplicationDocuments.  # noqa: E501
        :type esign_status: str
        """
        self.swagger_types = {
            'loan_application_id': str,
            'document_id': str,
            'digio_doc_id': str,
            'document_name': str,
            'partner_doc': str,
            'partner_pan': str,
            'partner_mobile': str,
            'esign_status': str
        }

        self.attribute_map = {
            'loan_application_id': 'loan_application_id',
            'document_id': 'document_id',
            'digio_doc_id': 'digio_doc_id',
            'document_name': 'document_name',
            'partner_doc': 'partner_doc',
            'partner_pan': 'partner_pan',
            'partner_mobile': 'partner_mobile',
            'esign_status': 'esign_status'
        }

        self._loan_application_id = loan_application_id
        self._document_id = document_id
        self._digio_doc_id = digio_doc_id
        self._document_name = document_name
        self._partner_doc = partner_doc
        self._partner_pan = partner_pan
        self._partner_mobile = partner_mobile
        self._esign_status = esign_status

    @classmethod
    def from_dict(cls, dikt) -> 'LoanApplicationDocuments':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LoanApplicationDocuments of this LoanApplicationDocuments.  # noqa: E501
        :rtype: LoanApplicationDocuments
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loan_application_id(self) -> str:
        """Gets the loan_application_id of this LoanApplicationDocuments.


        :return: The loan_application_id of this LoanApplicationDocuments.
        :rtype: str
        """
        return self._loan_application_id

    @loan_application_id.setter
    def loan_application_id(self, loan_application_id: str):
        """Sets the loan_application_id of this LoanApplicationDocuments.


        :param loan_application_id: The loan_application_id of this LoanApplicationDocuments.
        :type loan_application_id: str
        """
        if loan_application_id is None:
            raise ValueError("Invalid value for `loan_application_id`, must not be `None`")  # noqa: E501

        self._loan_application_id = loan_application_id

    @property
    def document_id(self) -> str:
        """Gets the document_id of this LoanApplicationDocuments.


        :return: The document_id of this LoanApplicationDocuments.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id: str):
        """Sets the document_id of this LoanApplicationDocuments.


        :param document_id: The document_id of this LoanApplicationDocuments.
        :type document_id: str
        """
        if document_id is None:
            raise ValueError("Invalid value for `document_id`, must not be `None`")  # noqa: E501

        self._document_id = document_id

    @property
    def digio_doc_id(self) -> str:
        """Gets the digio_doc_id of this LoanApplicationDocuments.


        :return: The digio_doc_id of this LoanApplicationDocuments.
        :rtype: str
        """
        return self._digio_doc_id

    @digio_doc_id.setter
    def digio_doc_id(self, digio_doc_id: str):
        """Sets the digio_doc_id of this LoanApplicationDocuments.


        :param digio_doc_id: The digio_doc_id of this LoanApplicationDocuments.
        :type digio_doc_id: str
        """

        self._digio_doc_id = digio_doc_id

    @property
    def document_name(self) -> str:
        """Gets the document_name of this LoanApplicationDocuments.


        :return: The document_name of this LoanApplicationDocuments.
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name: str):
        """Sets the document_name of this LoanApplicationDocuments.


        :param document_name: The document_name of this LoanApplicationDocuments.
        :type document_name: str
        """
        if document_name is None:
            raise ValueError("Invalid value for `document_name`, must not be `None`")  # noqa: E501

        self._document_name = document_name

    @property
    def partner_doc(self) -> str:
        """Gets the partner_doc of this LoanApplicationDocuments.


        :return: The partner_doc of this LoanApplicationDocuments.
        :rtype: str
        """
        return self._partner_doc

    @partner_doc.setter
    def partner_doc(self, partner_doc: str):
        """Sets the partner_doc of this LoanApplicationDocuments.


        :param partner_doc: The partner_doc of this LoanApplicationDocuments.
        :type partner_doc: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if partner_doc not in allowed_values:
            raise ValueError(
                "Invalid value for `partner_doc` ({0}), must be one of {1}"
                .format(partner_doc, allowed_values)
            )

        self._partner_doc = partner_doc

    @property
    def partner_pan(self) -> str:
        """Gets the partner_pan of this LoanApplicationDocuments.


        :return: The partner_pan of this LoanApplicationDocuments.
        :rtype: str
        """
        return self._partner_pan

    @partner_pan.setter
    def partner_pan(self, partner_pan: str):
        """Sets the partner_pan of this LoanApplicationDocuments.


        :param partner_pan: The partner_pan of this LoanApplicationDocuments.
        :type partner_pan: str
        """

        self._partner_pan = partner_pan

    @property
    def partner_mobile(self) -> str:
        """Gets the partner_mobile of this LoanApplicationDocuments.


        :return: The partner_mobile of this LoanApplicationDocuments.
        :rtype: str
        """
        return self._partner_mobile

    @partner_mobile.setter
    def partner_mobile(self, partner_mobile: str):
        """Sets the partner_mobile of this LoanApplicationDocuments.


        :param partner_mobile: The partner_mobile of this LoanApplicationDocuments.
        :type partner_mobile: str
        """

        self._partner_mobile = partner_mobile

    @property
    def esign_status(self) -> str:
        """Gets the esign_status of this LoanApplicationDocuments.


        :return: The esign_status of this LoanApplicationDocuments.
        :rtype: str
        """
        return self._esign_status

    @esign_status.setter
    def esign_status(self, esign_status: str):
        """Sets the esign_status of this LoanApplicationDocuments.


        :param esign_status: The esign_status of this LoanApplicationDocuments.
        :type esign_status: str
        """

        self._esign_status = esign_status
