# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BusinessAddressUpdate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, address_line_1: str=None, address_line_2: str=None, address_line_3: str=None, city_name: str=None, city_pin_code: str=None):  # noqa: E501
        """BusinessAddressUpdate - a model defined in Swagger

        :param address_line_1: The address_line_1 of this BusinessAddressUpdate.  # noqa: E501
        :type address_line_1: str
        :param address_line_2: The address_line_2 of this BusinessAddressUpdate.  # noqa: E501
        :type address_line_2: str
        :param address_line_3: The address_line_3 of this BusinessAddressUpdate.  # noqa: E501
        :type address_line_3: str
        :param city_name: The city_name of this BusinessAddressUpdate.  # noqa: E501
        :type city_name: str
        :param city_pin_code: The city_pin_code of this BusinessAddressUpdate.  # noqa: E501
        :type city_pin_code: str
        """
        self.swagger_types = {
            'address_line_1': str,
            'address_line_2': str,
            'address_line_3': str,
            'city_name': str,
            'city_pin_code': str
        }

        self.attribute_map = {
            'address_line_1': 'address_line_1',
            'address_line_2': 'address_line_2',
            'address_line_3': 'address_line_3',
            'city_name': 'city_name',
            'city_pin_code': 'city_pin_code'
        }

        self._address_line_1 = address_line_1
        self._address_line_2 = address_line_2
        self._address_line_3 = address_line_3
        self._city_name = city_name
        self._city_pin_code = city_pin_code

    @classmethod
    def from_dict(cls, dikt) -> 'BusinessAddressUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BusinessAddressUpdate of this BusinessAddressUpdate.  # noqa: E501
        :rtype: BusinessAddressUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line_1(self) -> str:
        """Gets the address_line_1 of this BusinessAddressUpdate.


        :return: The address_line_1 of this BusinessAddressUpdate.
        :rtype: str
        """
        return self._address_line_1

    @address_line_1.setter
    def address_line_1(self, address_line_1: str):
        """Sets the address_line_1 of this BusinessAddressUpdate.


        :param address_line_1: The address_line_1 of this BusinessAddressUpdate.
        :type address_line_1: str
        """
        if address_line_1 is not None and len(address_line_1) > 500:
            raise ValueError("Invalid value for `address_line_1`, length must be less than or equal to `500`")  # noqa: E501
        if address_line_1 is not None and len(address_line_1) < 5:
            raise ValueError("Invalid value for `address_line_1`, length must be greater than or equal to `5`")  # noqa: E501

        self._address_line_1 = address_line_1

    @property
    def address_line_2(self) -> str:
        """Gets the address_line_2 of this BusinessAddressUpdate.


        :return: The address_line_2 of this BusinessAddressUpdate.
        :rtype: str
        """
        return self._address_line_2

    @address_line_2.setter
    def address_line_2(self, address_line_2: str):
        """Sets the address_line_2 of this BusinessAddressUpdate.


        :param address_line_2: The address_line_2 of this BusinessAddressUpdate.
        :type address_line_2: str
        """
        if address_line_2 is not None and len(address_line_2) > 500:
            raise ValueError("Invalid value for `address_line_2`, length must be less than or equal to `500`")  # noqa: E501
        if address_line_2 is not None and len(address_line_2) < 5:
            raise ValueError("Invalid value for `address_line_2`, length must be greater than or equal to `5`")  # noqa: E501

        self._address_line_2 = address_line_2

    @property
    def address_line_3(self) -> str:
        """Gets the address_line_3 of this BusinessAddressUpdate.


        :return: The address_line_3 of this BusinessAddressUpdate.
        :rtype: str
        """
        return self._address_line_3

    @address_line_3.setter
    def address_line_3(self, address_line_3: str):
        """Sets the address_line_3 of this BusinessAddressUpdate.


        :param address_line_3: The address_line_3 of this BusinessAddressUpdate.
        :type address_line_3: str
        """
        if address_line_3 is not None and len(address_line_3) > 500:
            raise ValueError("Invalid value for `address_line_3`, length must be less than or equal to `500`")  # noqa: E501
        if address_line_3 is not None and len(address_line_3) < 5:
            raise ValueError("Invalid value for `address_line_3`, length must be greater than or equal to `5`")  # noqa: E501

        self._address_line_3 = address_line_3

    @property
    def city_name(self) -> str:
        """Gets the city_name of this BusinessAddressUpdate.


        :return: The city_name of this BusinessAddressUpdate.
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name: str):
        """Sets the city_name of this BusinessAddressUpdate.


        :param city_name: The city_name of this BusinessAddressUpdate.
        :type city_name: str
        """

        self._city_name = city_name

    @property
    def city_pin_code(self) -> str:
        """Gets the city_pin_code of this BusinessAddressUpdate.


        :return: The city_pin_code of this BusinessAddressUpdate.
        :rtype: str
        """
        return self._city_pin_code

    @city_pin_code.setter
    def city_pin_code(self, city_pin_code: str):
        """Sets the city_pin_code of this BusinessAddressUpdate.


        :param city_pin_code: The city_pin_code of this BusinessAddressUpdate.
        :type city_pin_code: str
        """

        self._city_pin_code = city_pin_code
