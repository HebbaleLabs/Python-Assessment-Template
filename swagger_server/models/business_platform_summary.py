# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BusinessPlatformSummary(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, version: int=None, business_pan: str=None, org_name: str=None, merchant_id: str=None, operating_since_month: str=None, operating_since_year: int=None, last_six_months_amount: int=None):  # noqa: E501
        """BusinessPlatformSummary - a model defined in Swagger

        :param id: The id of this BusinessPlatformSummary.  # noqa: E501
        :type id: str
        :param version: The version of this BusinessPlatformSummary.  # noqa: E501
        :type version: int
        :param business_pan: The business_pan of this BusinessPlatformSummary.  # noqa: E501
        :type business_pan: str
        :param org_name: The org_name of this BusinessPlatformSummary.  # noqa: E501
        :type org_name: str
        :param merchant_id: The merchant_id of this BusinessPlatformSummary.  # noqa: E501
        :type merchant_id: str
        :param operating_since_month: The operating_since_month of this BusinessPlatformSummary.  # noqa: E501
        :type operating_since_month: str
        :param operating_since_year: The operating_since_year of this BusinessPlatformSummary.  # noqa: E501
        :type operating_since_year: int
        :param last_six_months_amount: The last_six_months_amount of this BusinessPlatformSummary.  # noqa: E501
        :type last_six_months_amount: int
        """
        self.swagger_types = {
            'id': str,
            'version': int,
            'business_pan': str,
            'org_name': str,
            'merchant_id': str,
            'operating_since_month': str,
            'operating_since_year': int,
            'last_six_months_amount': int
        }

        self.attribute_map = {
            'id': '_id',
            'version': 'version',
            'business_pan': 'business_pan',
            'org_name': 'org_name',
            'merchant_id': 'merchant_id',
            'operating_since_month': 'operating_since_month',
            'operating_since_year': 'operating_since_year',
            'last_six_months_amount': 'last_six_months_amount'
        }

        self._id = id
        self._version = version
        self._business_pan = business_pan
        self._org_name = org_name
        self._merchant_id = merchant_id
        self._operating_since_month = operating_since_month
        self._operating_since_year = operating_since_year
        self._last_six_months_amount = last_six_months_amount

    @classmethod
    def from_dict(cls, dikt) -> 'BusinessPlatformSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BusinessPlatformSummary of this BusinessPlatformSummary.  # noqa: E501
        :rtype: BusinessPlatformSummary
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BusinessPlatformSummary.


        :return: The id of this BusinessPlatformSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BusinessPlatformSummary.


        :param id: The id of this BusinessPlatformSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def version(self) -> int:
        """Gets the version of this BusinessPlatformSummary.


        :return: The version of this BusinessPlatformSummary.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this BusinessPlatformSummary.


        :param version: The version of this BusinessPlatformSummary.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def business_pan(self) -> str:
        """Gets the business_pan of this BusinessPlatformSummary.


        :return: The business_pan of this BusinessPlatformSummary.
        :rtype: str
        """
        return self._business_pan

    @business_pan.setter
    def business_pan(self, business_pan: str):
        """Sets the business_pan of this BusinessPlatformSummary.


        :param business_pan: The business_pan of this BusinessPlatformSummary.
        :type business_pan: str
        """
        if business_pan is None:
            raise ValueError("Invalid value for `business_pan`, must not be `None`")  # noqa: E501

        self._business_pan = business_pan

    @property
    def org_name(self) -> str:
        """Gets the org_name of this BusinessPlatformSummary.


        :return: The org_name of this BusinessPlatformSummary.
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name: str):
        """Sets the org_name of this BusinessPlatformSummary.


        :param org_name: The org_name of this BusinessPlatformSummary.
        :type org_name: str
        """
        if org_name is None:
            raise ValueError("Invalid value for `org_name`, must not be `None`")  # noqa: E501

        self._org_name = org_name

    @property
    def merchant_id(self) -> str:
        """Gets the merchant_id of this BusinessPlatformSummary.


        :return: The merchant_id of this BusinessPlatformSummary.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id: str):
        """Sets the merchant_id of this BusinessPlatformSummary.


        :param merchant_id: The merchant_id of this BusinessPlatformSummary.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def operating_since_month(self) -> str:
        """Gets the operating_since_month of this BusinessPlatformSummary.


        :return: The operating_since_month of this BusinessPlatformSummary.
        :rtype: str
        """
        return self._operating_since_month

    @operating_since_month.setter
    def operating_since_month(self, operating_since_month: str):
        """Sets the operating_since_month of this BusinessPlatformSummary.


        :param operating_since_month: The operating_since_month of this BusinessPlatformSummary.
        :type operating_since_month: str
        """
        if operating_since_month is None:
            raise ValueError("Invalid value for `operating_since_month`, must not be `None`")  # noqa: E501

        self._operating_since_month = operating_since_month

    @property
    def operating_since_year(self) -> int:
        """Gets the operating_since_year of this BusinessPlatformSummary.


        :return: The operating_since_year of this BusinessPlatformSummary.
        :rtype: int
        """
        return self._operating_since_year

    @operating_since_year.setter
    def operating_since_year(self, operating_since_year: int):
        """Sets the operating_since_year of this BusinessPlatformSummary.


        :param operating_since_year: The operating_since_year of this BusinessPlatformSummary.
        :type operating_since_year: int
        """
        if operating_since_year is None:
            raise ValueError("Invalid value for `operating_since_year`, must not be `None`")  # noqa: E501
        if operating_since_year is not None and operating_since_year < 2000:  # noqa: E501
            raise ValueError("Invalid value for `operating_since_year`, must be a value greater than or equal to `2000`")  # noqa: E501

        self._operating_since_year = operating_since_year

    @property
    def last_six_months_amount(self) -> int:
        """Gets the last_six_months_amount of this BusinessPlatformSummary.


        :return: The last_six_months_amount of this BusinessPlatformSummary.
        :rtype: int
        """
        return self._last_six_months_amount

    @last_six_months_amount.setter
    def last_six_months_amount(self, last_six_months_amount: int):
        """Sets the last_six_months_amount of this BusinessPlatformSummary.


        :param last_six_months_amount: The last_six_months_amount of this BusinessPlatformSummary.
        :type last_six_months_amount: int
        """

        self._last_six_months_amount = last_six_months_amount
