# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BusinessFileType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, file_type_code: str=None, file_type_desc: str=None):  # noqa: E501
        """BusinessFileType - a model defined in Swagger

        :param file_type_code: The file_type_code of this BusinessFileType.  # noqa: E501
        :type file_type_code: str
        :param file_type_desc: The file_type_desc of this BusinessFileType.  # noqa: E501
        :type file_type_desc: str
        """
        self.swagger_types = {
            'file_type_code': str,
            'file_type_desc': str
        }

        self.attribute_map = {
            'file_type_code': 'file_type_code',
            'file_type_desc': 'file_type_desc'
        }

        self._file_type_code = file_type_code
        self._file_type_desc = file_type_desc

    @classmethod
    def from_dict(cls, dikt) -> 'BusinessFileType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BusinessFileType of this BusinessFileType.  # noqa: E501
        :rtype: BusinessFileType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_type_code(self) -> str:
        """Gets the file_type_code of this BusinessFileType.


        :return: The file_type_code of this BusinessFileType.
        :rtype: str
        """
        return self._file_type_code

    @file_type_code.setter
    def file_type_code(self, file_type_code: str):
        """Sets the file_type_code of this BusinessFileType.


        :param file_type_code: The file_type_code of this BusinessFileType.
        :type file_type_code: str
        """
        if file_type_code is None:
            raise ValueError("Invalid value for `file_type_code`, must not be `None`")  # noqa: E501

        self._file_type_code = file_type_code

    @property
    def file_type_desc(self) -> str:
        """Gets the file_type_desc of this BusinessFileType.


        :return: The file_type_desc of this BusinessFileType.
        :rtype: str
        """
        return self._file_type_desc

    @file_type_desc.setter
    def file_type_desc(self, file_type_desc: str):
        """Sets the file_type_desc of this BusinessFileType.


        :param file_type_desc: The file_type_desc of this BusinessFileType.
        :type file_type_desc: str
        """
        if file_type_desc is None:
            raise ValueError("Invalid value for `file_type_desc`, must not be `None`")  # noqa: E501

        self._file_type_desc = file_type_desc
