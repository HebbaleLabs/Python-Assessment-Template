# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Relationship(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, relationship_code: str=None, relationship_name: str=None):  # noqa: E501
        """Relationship - a model defined in Swagger

        :param id: The id of this Relationship.  # noqa: E501
        :type id: str
        :param relationship_code: The relationship_code of this Relationship.  # noqa: E501
        :type relationship_code: str
        :param relationship_name: The relationship_name of this Relationship.  # noqa: E501
        :type relationship_name: str
        """
        self.swagger_types = {
            'id': str,
            'relationship_code': str,
            'relationship_name': str
        }

        self.attribute_map = {
            'id': '_id',
            'relationship_code': 'relationship_code',
            'relationship_name': 'relationship_name'
        }

        self._id = id
        self._relationship_code = relationship_code
        self._relationship_name = relationship_name

    @classmethod
    def from_dict(cls, dikt) -> 'Relationship':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Relationship of this Relationship.  # noqa: E501
        :rtype: Relationship
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Relationship.


        :return: The id of this Relationship.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Relationship.


        :param id: The id of this Relationship.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def relationship_code(self) -> str:
        """Gets the relationship_code of this Relationship.


        :return: The relationship_code of this Relationship.
        :rtype: str
        """
        return self._relationship_code

    @relationship_code.setter
    def relationship_code(self, relationship_code: str):
        """Sets the relationship_code of this Relationship.


        :param relationship_code: The relationship_code of this Relationship.
        :type relationship_code: str
        """
        if relationship_code is None:
            raise ValueError("Invalid value for `relationship_code`, must not be `None`")  # noqa: E501

        self._relationship_code = relationship_code

    @property
    def relationship_name(self) -> str:
        """Gets the relationship_name of this Relationship.


        :return: The relationship_name of this Relationship.
        :rtype: str
        """
        return self._relationship_name

    @relationship_name.setter
    def relationship_name(self, relationship_name: str):
        """Sets the relationship_name of this Relationship.


        :param relationship_name: The relationship_name of this Relationship.
        :type relationship_name: str
        """
        if relationship_name is None:
            raise ValueError("Invalid value for `relationship_name`, must not be `None`")  # noqa: E501

        self._relationship_name = relationship_name
