# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BusinessBankAccountUpdate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ifsc_code: str=None, account_type: str=None, primary_account: str=None):  # noqa: E501
        """BusinessBankAccountUpdate - a model defined in Swagger

        :param ifsc_code: The ifsc_code of this BusinessBankAccountUpdate.  # noqa: E501
        :type ifsc_code: str
        :param account_type: The account_type of this BusinessBankAccountUpdate.  # noqa: E501
        :type account_type: str
        :param primary_account: The primary_account of this BusinessBankAccountUpdate.  # noqa: E501
        :type primary_account: str
        """
        self.swagger_types = {
            'ifsc_code': str,
            'account_type': str,
            'primary_account': str
        }

        self.attribute_map = {
            'ifsc_code': 'ifsc_code',
            'account_type': 'account_type',
            'primary_account': 'primary_account'
        }

        self._ifsc_code = ifsc_code
        self._account_type = account_type
        self._primary_account = primary_account

    @classmethod
    def from_dict(cls, dikt) -> 'BusinessBankAccountUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BusinessBankAccountUpdate of this BusinessBankAccountUpdate.  # noqa: E501
        :rtype: BusinessBankAccountUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ifsc_code(self) -> str:
        """Gets the ifsc_code of this BusinessBankAccountUpdate.


        :return: The ifsc_code of this BusinessBankAccountUpdate.
        :rtype: str
        """
        return self._ifsc_code

    @ifsc_code.setter
    def ifsc_code(self, ifsc_code: str):
        """Sets the ifsc_code of this BusinessBankAccountUpdate.


        :param ifsc_code: The ifsc_code of this BusinessBankAccountUpdate.
        :type ifsc_code: str
        """

        self._ifsc_code = ifsc_code

    @property
    def account_type(self) -> str:
        """Gets the account_type of this BusinessBankAccountUpdate.


        :return: The account_type of this BusinessBankAccountUpdate.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type: str):
        """Sets the account_type of this BusinessBankAccountUpdate.


        :param account_type: The account_type of this BusinessBankAccountUpdate.
        :type account_type: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def primary_account(self) -> str:
        """Gets the primary_account of this BusinessBankAccountUpdate.


        :return: The primary_account of this BusinessBankAccountUpdate.
        :rtype: str
        """
        return self._primary_account

    @primary_account.setter
    def primary_account(self, primary_account: str):
        """Sets the primary_account of this BusinessBankAccountUpdate.


        :param primary_account: The primary_account of this BusinessBankAccountUpdate.
        :type primary_account: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if primary_account not in allowed_values:
            raise ValueError(
                "Invalid value for `primary_account` ({0}), must be one of {1}"
                .format(primary_account, allowed_values)
            )

        self._primary_account = primary_account
