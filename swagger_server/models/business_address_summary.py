# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BusinessAddressSummary(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, business_pan: str=None, version: int=None, address_tag: str=None, address_line_1: str=None, address_line_2: str=None, address_line_3: str=None, city_name: str=None, city_pin_code: str=None):  # noqa: E501
        """BusinessAddressSummary - a model defined in Swagger

        :param id: The id of this BusinessAddressSummary.  # noqa: E501
        :type id: str
        :param business_pan: The business_pan of this BusinessAddressSummary.  # noqa: E501
        :type business_pan: str
        :param version: The version of this BusinessAddressSummary.  # noqa: E501
        :type version: int
        :param address_tag: The address_tag of this BusinessAddressSummary.  # noqa: E501
        :type address_tag: str
        :param address_line_1: The address_line_1 of this BusinessAddressSummary.  # noqa: E501
        :type address_line_1: str
        :param address_line_2: The address_line_2 of this BusinessAddressSummary.  # noqa: E501
        :type address_line_2: str
        :param address_line_3: The address_line_3 of this BusinessAddressSummary.  # noqa: E501
        :type address_line_3: str
        :param city_name: The city_name of this BusinessAddressSummary.  # noqa: E501
        :type city_name: str
        :param city_pin_code: The city_pin_code of this BusinessAddressSummary.  # noqa: E501
        :type city_pin_code: str
        """
        self.swagger_types = {
            'id': str,
            'business_pan': str,
            'version': int,
            'address_tag': str,
            'address_line_1': str,
            'address_line_2': str,
            'address_line_3': str,
            'city_name': str,
            'city_pin_code': str
        }

        self.attribute_map = {
            'id': '_id',
            'business_pan': 'business_pan',
            'version': 'version',
            'address_tag': 'address_tag',
            'address_line_1': 'address_line_1',
            'address_line_2': 'address_line_2',
            'address_line_3': 'address_line_3',
            'city_name': 'city_name',
            'city_pin_code': 'city_pin_code'
        }

        self._id = id
        self._business_pan = business_pan
        self._version = version
        self._address_tag = address_tag
        self._address_line_1 = address_line_1
        self._address_line_2 = address_line_2
        self._address_line_3 = address_line_3
        self._city_name = city_name
        self._city_pin_code = city_pin_code

    @classmethod
    def from_dict(cls, dikt) -> 'BusinessAddressSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BusinessAddressSummary of this BusinessAddressSummary.  # noqa: E501
        :rtype: BusinessAddressSummary
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BusinessAddressSummary.


        :return: The id of this BusinessAddressSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BusinessAddressSummary.


        :param id: The id of this BusinessAddressSummary.
        :type id: str
        """

        self._id = id

    @property
    def business_pan(self) -> str:
        """Gets the business_pan of this BusinessAddressSummary.


        :return: The business_pan of this BusinessAddressSummary.
        :rtype: str
        """
        return self._business_pan

    @business_pan.setter
    def business_pan(self, business_pan: str):
        """Sets the business_pan of this BusinessAddressSummary.


        :param business_pan: The business_pan of this BusinessAddressSummary.
        :type business_pan: str
        """
        if business_pan is None:
            raise ValueError("Invalid value for `business_pan`, must not be `None`")  # noqa: E501

        self._business_pan = business_pan

    @property
    def version(self) -> int:
        """Gets the version of this BusinessAddressSummary.


        :return: The version of this BusinessAddressSummary.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this BusinessAddressSummary.


        :param version: The version of this BusinessAddressSummary.
        :type version: int
        """

        self._version = version

    @property
    def address_tag(self) -> str:
        """Gets the address_tag of this BusinessAddressSummary.


        :return: The address_tag of this BusinessAddressSummary.
        :rtype: str
        """
        return self._address_tag

    @address_tag.setter
    def address_tag(self, address_tag: str):
        """Sets the address_tag of this BusinessAddressSummary.


        :param address_tag: The address_tag of this BusinessAddressSummary.
        :type address_tag: str
        """
        if address_tag is None:
            raise ValueError("Invalid value for `address_tag`, must not be `None`")  # noqa: E501
        if address_tag is not None and len(address_tag) > 10:
            raise ValueError("Invalid value for `address_tag`, length must be less than or equal to `10`")  # noqa: E501
        if address_tag is not None and len(address_tag) < 3:
            raise ValueError("Invalid value for `address_tag`, length must be greater than or equal to `3`")  # noqa: E501

        self._address_tag = address_tag

    @property
    def address_line_1(self) -> str:
        """Gets the address_line_1 of this BusinessAddressSummary.


        :return: The address_line_1 of this BusinessAddressSummary.
        :rtype: str
        """
        return self._address_line_1

    @address_line_1.setter
    def address_line_1(self, address_line_1: str):
        """Sets the address_line_1 of this BusinessAddressSummary.


        :param address_line_1: The address_line_1 of this BusinessAddressSummary.
        :type address_line_1: str
        """
        if address_line_1 is None:
            raise ValueError("Invalid value for `address_line_1`, must not be `None`")  # noqa: E501
        if address_line_1 is not None and len(address_line_1) > 500:
            raise ValueError("Invalid value for `address_line_1`, length must be less than or equal to `500`")  # noqa: E501
        if address_line_1 is not None and len(address_line_1) < 5:
            raise ValueError("Invalid value for `address_line_1`, length must be greater than or equal to `5`")  # noqa: E501

        self._address_line_1 = address_line_1

    @property
    def address_line_2(self) -> str:
        """Gets the address_line_2 of this BusinessAddressSummary.


        :return: The address_line_2 of this BusinessAddressSummary.
        :rtype: str
        """
        return self._address_line_2

    @address_line_2.setter
    def address_line_2(self, address_line_2: str):
        """Sets the address_line_2 of this BusinessAddressSummary.


        :param address_line_2: The address_line_2 of this BusinessAddressSummary.
        :type address_line_2: str
        """
        if address_line_2 is not None and len(address_line_2) > 500:
            raise ValueError("Invalid value for `address_line_2`, length must be less than or equal to `500`")  # noqa: E501
        if address_line_2 is not None and len(address_line_2) < 5:
            raise ValueError("Invalid value for `address_line_2`, length must be greater than or equal to `5`")  # noqa: E501

        self._address_line_2 = address_line_2

    @property
    def address_line_3(self) -> str:
        """Gets the address_line_3 of this BusinessAddressSummary.


        :return: The address_line_3 of this BusinessAddressSummary.
        :rtype: str
        """
        return self._address_line_3

    @address_line_3.setter
    def address_line_3(self, address_line_3: str):
        """Sets the address_line_3 of this BusinessAddressSummary.


        :param address_line_3: The address_line_3 of this BusinessAddressSummary.
        :type address_line_3: str
        """
        if address_line_3 is not None and len(address_line_3) > 500:
            raise ValueError("Invalid value for `address_line_3`, length must be less than or equal to `500`")  # noqa: E501
        if address_line_3 is not None and len(address_line_3) < 5:
            raise ValueError("Invalid value for `address_line_3`, length must be greater than or equal to `5`")  # noqa: E501

        self._address_line_3 = address_line_3

    @property
    def city_name(self) -> str:
        """Gets the city_name of this BusinessAddressSummary.


        :return: The city_name of this BusinessAddressSummary.
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name: str):
        """Sets the city_name of this BusinessAddressSummary.


        :param city_name: The city_name of this BusinessAddressSummary.
        :type city_name: str
        """
        if city_name is None:
            raise ValueError("Invalid value for `city_name`, must not be `None`")  # noqa: E501

        self._city_name = city_name

    @property
    def city_pin_code(self) -> str:
        """Gets the city_pin_code of this BusinessAddressSummary.


        :return: The city_pin_code of this BusinessAddressSummary.
        :rtype: str
        """
        return self._city_pin_code

    @city_pin_code.setter
    def city_pin_code(self, city_pin_code: str):
        """Sets the city_pin_code of this BusinessAddressSummary.


        :param city_pin_code: The city_pin_code of this BusinessAddressSummary.
        :type city_pin_code: str
        """
        if city_pin_code is None:
            raise ValueError("Invalid value for `city_pin_code`, must not be `None`")  # noqa: E501

        self._city_pin_code = city_pin_code
