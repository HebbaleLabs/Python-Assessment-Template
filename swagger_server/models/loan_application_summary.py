# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LoanApplicationSummary(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, version: int=None, business_pan: str=None, loan_amount_required: float=None, currency: str='INR'):  # noqa: E501
        """LoanApplicationSummary - a model defined in Swagger

        :param id: The id of this LoanApplicationSummary.  # noqa: E501
        :type id: str
        :param version: The version of this LoanApplicationSummary.  # noqa: E501
        :type version: int
        :param business_pan: The business_pan of this LoanApplicationSummary.  # noqa: E501
        :type business_pan: str
        :param loan_amount_required: The loan_amount_required of this LoanApplicationSummary.  # noqa: E501
        :type loan_amount_required: float
        :param currency: The currency of this LoanApplicationSummary.  # noqa: E501
        :type currency: str
        """
        self.swagger_types = {
            'id': str,
            'version': int,
            'business_pan': str,
            'loan_amount_required': float,
            'currency': str
        }

        self.attribute_map = {
            'id': '_id',
            'version': 'version',
            'business_pan': 'business_pan',
            'loan_amount_required': 'loan_amount_required',
            'currency': 'currency'
        }

        self._id = id
        self._version = version
        self._business_pan = business_pan
        self._loan_amount_required = loan_amount_required
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt) -> 'LoanApplicationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LoanApplicationSummary of this LoanApplicationSummary.  # noqa: E501
        :rtype: LoanApplicationSummary
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this LoanApplicationSummary.


        :return: The id of this LoanApplicationSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this LoanApplicationSummary.


        :param id: The id of this LoanApplicationSummary.
        :type id: str
        """

        self._id = id

    @property
    def version(self) -> int:
        """Gets the version of this LoanApplicationSummary.


        :return: The version of this LoanApplicationSummary.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this LoanApplicationSummary.


        :param version: The version of this LoanApplicationSummary.
        :type version: int
        """

        self._version = version

    @property
    def business_pan(self) -> str:
        """Gets the business_pan of this LoanApplicationSummary.


        :return: The business_pan of this LoanApplicationSummary.
        :rtype: str
        """
        return self._business_pan

    @business_pan.setter
    def business_pan(self, business_pan: str):
        """Sets the business_pan of this LoanApplicationSummary.


        :param business_pan: The business_pan of this LoanApplicationSummary.
        :type business_pan: str
        """

        self._business_pan = business_pan

    @property
    def loan_amount_required(self) -> float:
        """Gets the loan_amount_required of this LoanApplicationSummary.


        :return: The loan_amount_required of this LoanApplicationSummary.
        :rtype: float
        """
        return self._loan_amount_required

    @loan_amount_required.setter
    def loan_amount_required(self, loan_amount_required: float):
        """Sets the loan_amount_required of this LoanApplicationSummary.


        :param loan_amount_required: The loan_amount_required of this LoanApplicationSummary.
        :type loan_amount_required: float
        """
        if loan_amount_required is not None and loan_amount_required > 1.0E+7:  # noqa: E501
            raise ValueError("Invalid value for `loan_amount_required`, must be a value less than or equal to `1.0E+7`")  # noqa: E501
        if loan_amount_required is not None and loan_amount_required < 1:  # noqa: E501
            raise ValueError("Invalid value for `loan_amount_required`, must be a value greater than or equal to `1`")  # noqa: E501

        self._loan_amount_required = loan_amount_required

    @property
    def currency(self) -> str:
        """Gets the currency of this LoanApplicationSummary.


        :return: The currency of this LoanApplicationSummary.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this LoanApplicationSummary.


        :param currency: The currency of this LoanApplicationSummary.
        :type currency: str
        """
        allowed_values = ["INR"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency
