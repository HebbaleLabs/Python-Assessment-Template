# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LoanApplication(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, version: int=None, business_pan: str=None, business_name: str=None, org_name: str=None, referred_by: str=None, initiator: str=None, loan_amount_required: str=None, currency: str='INR'):  # noqa: E501
        """LoanApplication - a model defined in Swagger

        :param id: The id of this LoanApplication.  # noqa: E501
        :type id: str
        :param version: The version of this LoanApplication.  # noqa: E501
        :type version: int
        :param business_pan: The business_pan of this LoanApplication.  # noqa: E501
        :type business_pan: str
        :param business_name: The business_name of this LoanApplication.  # noqa: E501
        :type business_name: str
        :param org_name: The org_name of this LoanApplication.  # noqa: E501
        :type org_name: str
        :param referred_by: The referred_by of this LoanApplication.  # noqa: E501
        :type referred_by: str
        :param initiator: The initiator of this LoanApplication.  # noqa: E501
        :type initiator: str
        :param loan_amount_required: The loan_amount_required of this LoanApplication.  # noqa: E501
        :type loan_amount_required: str
        :param currency: The currency of this LoanApplication.  # noqa: E501
        :type currency: str
        """
        self.swagger_types = {
            'id': str,
            'version': int,
            'business_pan': str,
            'business_name': str,
            'org_name': str,
            'referred_by': str,
            'initiator': str,
            'loan_amount_required': str,
            'currency': str
        }

        self.attribute_map = {
            'id': '_id',
            'version': 'version',
            'business_pan': 'business_pan',
            'business_name': 'business_name',
            'org_name': 'org_name',
            'referred_by': 'referred_by',
            'initiator': 'initiator',
            'loan_amount_required': 'loan_amount_required',
            'currency': 'currency'
        }

        self._id = id
        self._version = version
        self._business_pan = business_pan
        self._business_name = business_name
        self._org_name = org_name
        self._referred_by = referred_by
        self._initiator = initiator
        self._loan_amount_required = loan_amount_required
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt) -> 'LoanApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LoanApplication of this LoanApplication.  # noqa: E501
        :rtype: LoanApplication
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this LoanApplication.


        :return: The id of this LoanApplication.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this LoanApplication.


        :param id: The id of this LoanApplication.
        :type id: str
        """

        self._id = id

    @property
    def version(self) -> int:
        """Gets the version of this LoanApplication.


        :return: The version of this LoanApplication.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this LoanApplication.


        :param version: The version of this LoanApplication.
        :type version: int
        """

        self._version = version

    @property
    def business_pan(self) -> str:
        """Gets the business_pan of this LoanApplication.


        :return: The business_pan of this LoanApplication.
        :rtype: str
        """
        return self._business_pan

    @business_pan.setter
    def business_pan(self, business_pan: str):
        """Sets the business_pan of this LoanApplication.


        :param business_pan: The business_pan of this LoanApplication.
        :type business_pan: str
        """
        if business_pan is None:
            raise ValueError("Invalid value for `business_pan`, must not be `None`")  # noqa: E501

        self._business_pan = business_pan

    @property
    def business_name(self) -> str:
        """Gets the business_name of this LoanApplication.


        :return: The business_name of this LoanApplication.
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name: str):
        """Sets the business_name of this LoanApplication.


        :param business_name: The business_name of this LoanApplication.
        :type business_name: str
        """
        if business_name is None:
            raise ValueError("Invalid value for `business_name`, must not be `None`")  # noqa: E501

        self._business_name = business_name

    @property
    def org_name(self) -> str:
        """Gets the org_name of this LoanApplication.


        :return: The org_name of this LoanApplication.
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name: str):
        """Sets the org_name of this LoanApplication.


        :param org_name: The org_name of this LoanApplication.
        :type org_name: str
        """
        if org_name is None:
            raise ValueError("Invalid value for `org_name`, must not be `None`")  # noqa: E501

        self._org_name = org_name

    @property
    def referred_by(self) -> str:
        """Gets the referred_by of this LoanApplication.


        :return: The referred_by of this LoanApplication.
        :rtype: str
        """
        return self._referred_by

    @referred_by.setter
    def referred_by(self, referred_by: str):
        """Sets the referred_by of this LoanApplication.


        :param referred_by: The referred_by of this LoanApplication.
        :type referred_by: str
        """

        self._referred_by = referred_by

    @property
    def initiator(self) -> str:
        """Gets the initiator of this LoanApplication.


        :return: The initiator of this LoanApplication.
        :rtype: str
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator: str):
        """Sets the initiator of this LoanApplication.


        :param initiator: The initiator of this LoanApplication.
        :type initiator: str
        """
        if initiator is None:
            raise ValueError("Invalid value for `initiator`, must not be `None`")  # noqa: E501

        self._initiator = initiator

    @property
    def loan_amount_required(self) -> str:
        """Gets the loan_amount_required of this LoanApplication.


        :return: The loan_amount_required of this LoanApplication.
        :rtype: str
        """
        return self._loan_amount_required

    @loan_amount_required.setter
    def loan_amount_required(self, loan_amount_required: str):
        """Sets the loan_amount_required of this LoanApplication.


        :param loan_amount_required: The loan_amount_required of this LoanApplication.
        :type loan_amount_required: str
        """
        if loan_amount_required is None:
            raise ValueError("Invalid value for `loan_amount_required`, must not be `None`")  # noqa: E501

        self._loan_amount_required = loan_amount_required

    @property
    def currency(self) -> str:
        """Gets the currency of this LoanApplication.


        :return: The currency of this LoanApplication.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this LoanApplication.


        :param currency: The currency of this LoanApplication.
        :type currency: str
        """
        allowed_values = ["INR"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency
