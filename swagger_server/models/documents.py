# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Documents(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, file_type_code: str=None, file_type: str=None, file_data: str=None, file_name: str=None, file_id: str=None):  # noqa: E501
        """Documents - a model defined in Swagger

        :param file_type_code: The file_type_code of this Documents.  # noqa: E501
        :type file_type_code: str
        :param file_type: The file_type of this Documents.  # noqa: E501
        :type file_type: str
        :param file_data: The file_data of this Documents.  # noqa: E501
        :type file_data: str
        :param file_name: The file_name of this Documents.  # noqa: E501
        :type file_name: str
        :param file_id: The file_id of this Documents.  # noqa: E501
        :type file_id: str
        """
        self.swagger_types = {
            'file_type_code': str,
            'file_type': str,
            'file_data': str,
            'file_name': str,
            'file_id': str
        }

        self.attribute_map = {
            'file_type_code': 'file_type_code',
            'file_type': 'file_type',
            'file_data': 'file_data',
            'file_name': 'file_name',
            'file_id': 'file_id'
        }

        self._file_type_code = file_type_code
        self._file_type = file_type
        self._file_data = file_data
        self._file_name = file_name
        self._file_id = file_id

    @classmethod
    def from_dict(cls, dikt) -> 'Documents':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Documents of this Documents.  # noqa: E501
        :rtype: Documents
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_type_code(self) -> str:
        """Gets the file_type_code of this Documents.


        :return: The file_type_code of this Documents.
        :rtype: str
        """
        return self._file_type_code

    @file_type_code.setter
    def file_type_code(self, file_type_code: str):
        """Sets the file_type_code of this Documents.


        :param file_type_code: The file_type_code of this Documents.
        :type file_type_code: str
        """
        if file_type_code is None:
            raise ValueError("Invalid value for `file_type_code`, must not be `None`")  # noqa: E501

        self._file_type_code = file_type_code

    @property
    def file_type(self) -> str:
        """Gets the file_type of this Documents.


        :return: The file_type of this Documents.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type: str):
        """Sets the file_type of this Documents.


        :param file_type: The file_type of this Documents.
        :type file_type: str
        """
        if file_type is None:
            raise ValueError("Invalid value for `file_type`, must not be `None`")  # noqa: E501

        self._file_type = file_type

    @property
    def file_data(self) -> str:
        """Gets the file_data of this Documents.


        :return: The file_data of this Documents.
        :rtype: str
        """
        return self._file_data

    @file_data.setter
    def file_data(self, file_data: str):
        """Sets the file_data of this Documents.


        :param file_data: The file_data of this Documents.
        :type file_data: str
        """
        if file_data is None:
            raise ValueError("Invalid value for `file_data`, must not be `None`")  # noqa: E501

        self._file_data = file_data

    @property
    def file_name(self) -> str:
        """Gets the file_name of this Documents.


        :return: The file_name of this Documents.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name: str):
        """Sets the file_name of this Documents.


        :param file_name: The file_name of this Documents.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def file_id(self) -> str:
        """Gets the file_id of this Documents.


        :return: The file_id of this Documents.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id: str):
        """Sets the file_id of this Documents.


        :param file_id: The file_id of this Documents.
        :type file_id: str
        """

        self._file_id = file_id
