# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LoanApplicationTasks(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, task_name: str=None, stage_name: str=None, task_status: str=None, user_id: str=None, loan_application_id: str=None):  # noqa: E501
        """LoanApplicationTasks - a model defined in Swagger

        :param task_name: The task_name of this LoanApplicationTasks.  # noqa: E501
        :type task_name: str
        :param stage_name: The stage_name of this LoanApplicationTasks.  # noqa: E501
        :type stage_name: str
        :param task_status: The task_status of this LoanApplicationTasks.  # noqa: E501
        :type task_status: str
        :param user_id: The user_id of this LoanApplicationTasks.  # noqa: E501
        :type user_id: str
        :param loan_application_id: The loan_application_id of this LoanApplicationTasks.  # noqa: E501
        :type loan_application_id: str
        """
        self.swagger_types = {
            'task_name': str,
            'stage_name': str,
            'task_status': str,
            'user_id': str,
            'loan_application_id': str
        }

        self.attribute_map = {
            'task_name': 'taskName',
            'stage_name': 'stageName',
            'task_status': 'taskStatus',
            'user_id': 'userId',
            'loan_application_id': 'loan_application_id'
        }

        self._task_name = task_name
        self._stage_name = stage_name
        self._task_status = task_status
        self._user_id = user_id
        self._loan_application_id = loan_application_id

    @classmethod
    def from_dict(cls, dikt) -> 'LoanApplicationTasks':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LoanApplicationTasks of this LoanApplicationTasks.  # noqa: E501
        :rtype: LoanApplicationTasks
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_name(self) -> str:
        """Gets the task_name of this LoanApplicationTasks.


        :return: The task_name of this LoanApplicationTasks.
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name: str):
        """Sets the task_name of this LoanApplicationTasks.


        :param task_name: The task_name of this LoanApplicationTasks.
        :type task_name: str
        """
        if task_name is None:
            raise ValueError("Invalid value for `task_name`, must not be `None`")  # noqa: E501

        self._task_name = task_name

    @property
    def stage_name(self) -> str:
        """Gets the stage_name of this LoanApplicationTasks.


        :return: The stage_name of this LoanApplicationTasks.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name: str):
        """Sets the stage_name of this LoanApplicationTasks.


        :param stage_name: The stage_name of this LoanApplicationTasks.
        :type stage_name: str
        """
        if stage_name is None:
            raise ValueError("Invalid value for `stage_name`, must not be `None`")  # noqa: E501

        self._stage_name = stage_name

    @property
    def task_status(self) -> str:
        """Gets the task_status of this LoanApplicationTasks.


        :return: The task_status of this LoanApplicationTasks.
        :rtype: str
        """
        return self._task_status

    @task_status.setter
    def task_status(self, task_status: str):
        """Sets the task_status of this LoanApplicationTasks.


        :param task_status: The task_status of this LoanApplicationTasks.
        :type task_status: str
        """
        if task_status is None:
            raise ValueError("Invalid value for `task_status`, must not be `None`")  # noqa: E501

        self._task_status = task_status

    @property
    def user_id(self) -> str:
        """Gets the user_id of this LoanApplicationTasks.


        :return: The user_id of this LoanApplicationTasks.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this LoanApplicationTasks.


        :param user_id: The user_id of this LoanApplicationTasks.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def loan_application_id(self) -> str:
        """Gets the loan_application_id of this LoanApplicationTasks.


        :return: The loan_application_id of this LoanApplicationTasks.
        :rtype: str
        """
        return self._loan_application_id

    @loan_application_id.setter
    def loan_application_id(self, loan_application_id: str):
        """Sets the loan_application_id of this LoanApplicationTasks.


        :param loan_application_id: The loan_application_id of this LoanApplicationTasks.
        :type loan_application_id: str
        """
        if loan_application_id is None:
            raise ValueError("Invalid value for `loan_application_id`, must not be `None`")  # noqa: E501

        self._loan_application_id = loan_application_id
