# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.business import Business  # noqa: F401,E501
from swagger_server.models.metadata import Metadata  # noqa: F401,E501
from swagger_server import util


class BusinessResultsObject(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, business: List[Business]=None, metadata: Metadata=None):  # noqa: E501
        """BusinessResultsObject - a model defined in Swagger

        :param business: The business of this BusinessResultsObject.  # noqa: E501
        :type business: List[Business]
        :param metadata: The metadata of this BusinessResultsObject.  # noqa: E501
        :type metadata: Metadata
        """
        self.swagger_types = {
            'business': List[Business],
            'metadata': Metadata
        }

        self.attribute_map = {
            'business': 'business',
            'metadata': 'metadata'
        }

        self._business = business
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'BusinessResultsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BusinessResultsObject of this BusinessResultsObject.  # noqa: E501
        :rtype: BusinessResultsObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business(self) -> List[Business]:
        """Gets the business of this BusinessResultsObject.


        :return: The business of this BusinessResultsObject.
        :rtype: List[Business]
        """
        return self._business

    @business.setter
    def business(self, business: List[Business]):
        """Sets the business of this BusinessResultsObject.


        :param business: The business of this BusinessResultsObject.
        :type business: List[Business]
        """

        self._business = business

    @property
    def metadata(self) -> Metadata:
        """Gets the metadata of this BusinessResultsObject.


        :return: The metadata of this BusinessResultsObject.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Metadata):
        """Sets the metadata of this BusinessResultsObject.


        :param metadata: The metadata of this BusinessResultsObject.
        :type metadata: Metadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata
