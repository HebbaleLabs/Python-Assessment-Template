# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.business import Business  # noqa: F401,E501
from swagger_server.models.business_category import BusinessCategory  # noqa: F401,E501
from swagger_server.models.business_sub_category import BusinessSubCategory  # noqa: F401,E501
from swagger_server.models.business_type import BusinessType  # noqa: F401,E501
from swagger_server.models.city import City  # noqa: F401,E501
from swagger_server.models.operating_type import OperatingType  # noqa: F401,E501
from swagger_server.models.pin_code import PinCode  # noqa: F401,E501
from swagger_server.models.relationship import Relationship  # noqa: F401,E501
from swagger_server import util


class BusinessSummary(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, business: Business=None, business_type: BusinessType=None, business_category: BusinessCategory=None, business_sub_category: BusinessSubCategory=None, operating_type: OperatingType=None, relation: Relationship=None, city: City=None, city_pin: PinCode=None):  # noqa: E501
        """BusinessSummary - a model defined in Swagger

        :param business: The business of this BusinessSummary.  # noqa: E501
        :type business: Business
        :param business_type: The business_type of this BusinessSummary.  # noqa: E501
        :type business_type: BusinessType
        :param business_category: The business_category of this BusinessSummary.  # noqa: E501
        :type business_category: BusinessCategory
        :param business_sub_category: The business_sub_category of this BusinessSummary.  # noqa: E501
        :type business_sub_category: BusinessSubCategory
        :param operating_type: The operating_type of this BusinessSummary.  # noqa: E501
        :type operating_type: OperatingType
        :param relation: The relation of this BusinessSummary.  # noqa: E501
        :type relation: Relationship
        :param city: The city of this BusinessSummary.  # noqa: E501
        :type city: City
        :param city_pin: The city_pin of this BusinessSummary.  # noqa: E501
        :type city_pin: PinCode
        """
        self.swagger_types = {
            'business': Business,
            'business_type': BusinessType,
            'business_category': BusinessCategory,
            'business_sub_category': BusinessSubCategory,
            'operating_type': OperatingType,
            'relation': Relationship,
            'city': City,
            'city_pin': PinCode
        }

        self.attribute_map = {
            'business': 'business',
            'business_type': 'business_type',
            'business_category': 'business_category',
            'business_sub_category': 'business_sub_category',
            'operating_type': 'operating_type',
            'relation': 'relation',
            'city': 'city',
            'city_pin': 'city_pin'
        }

        self._business = business
        self._business_type = business_type
        self._business_category = business_category
        self._business_sub_category = business_sub_category
        self._operating_type = operating_type
        self._relation = relation
        self._city = city
        self._city_pin = city_pin

    @classmethod
    def from_dict(cls, dikt) -> 'BusinessSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BusinessSummary of this BusinessSummary.  # noqa: E501
        :rtype: BusinessSummary
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business(self) -> Business:
        """Gets the business of this BusinessSummary.


        :return: The business of this BusinessSummary.
        :rtype: Business
        """
        return self._business

    @business.setter
    def business(self, business: Business):
        """Sets the business of this BusinessSummary.


        :param business: The business of this BusinessSummary.
        :type business: Business
        """
        if business is None:
            raise ValueError("Invalid value for `business`, must not be `None`")  # noqa: E501

        self._business = business

    @property
    def business_type(self) -> BusinessType:
        """Gets the business_type of this BusinessSummary.


        :return: The business_type of this BusinessSummary.
        :rtype: BusinessType
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type: BusinessType):
        """Sets the business_type of this BusinessSummary.


        :param business_type: The business_type of this BusinessSummary.
        :type business_type: BusinessType
        """
        if business_type is None:
            raise ValueError("Invalid value for `business_type`, must not be `None`")  # noqa: E501

        self._business_type = business_type

    @property
    def business_category(self) -> BusinessCategory:
        """Gets the business_category of this BusinessSummary.


        :return: The business_category of this BusinessSummary.
        :rtype: BusinessCategory
        """
        return self._business_category

    @business_category.setter
    def business_category(self, business_category: BusinessCategory):
        """Sets the business_category of this BusinessSummary.


        :param business_category: The business_category of this BusinessSummary.
        :type business_category: BusinessCategory
        """
        if business_category is None:
            raise ValueError("Invalid value for `business_category`, must not be `None`")  # noqa: E501

        self._business_category = business_category

    @property
    def business_sub_category(self) -> BusinessSubCategory:
        """Gets the business_sub_category of this BusinessSummary.


        :return: The business_sub_category of this BusinessSummary.
        :rtype: BusinessSubCategory
        """
        return self._business_sub_category

    @business_sub_category.setter
    def business_sub_category(self, business_sub_category: BusinessSubCategory):
        """Sets the business_sub_category of this BusinessSummary.


        :param business_sub_category: The business_sub_category of this BusinessSummary.
        :type business_sub_category: BusinessSubCategory
        """
        if business_sub_category is None:
            raise ValueError("Invalid value for `business_sub_category`, must not be `None`")  # noqa: E501

        self._business_sub_category = business_sub_category

    @property
    def operating_type(self) -> OperatingType:
        """Gets the operating_type of this BusinessSummary.


        :return: The operating_type of this BusinessSummary.
        :rtype: OperatingType
        """
        return self._operating_type

    @operating_type.setter
    def operating_type(self, operating_type: OperatingType):
        """Sets the operating_type of this BusinessSummary.


        :param operating_type: The operating_type of this BusinessSummary.
        :type operating_type: OperatingType
        """
        if operating_type is None:
            raise ValueError("Invalid value for `operating_type`, must not be `None`")  # noqa: E501

        self._operating_type = operating_type

    @property
    def relation(self) -> Relationship:
        """Gets the relation of this BusinessSummary.


        :return: The relation of this BusinessSummary.
        :rtype: Relationship
        """
        return self._relation

    @relation.setter
    def relation(self, relation: Relationship):
        """Sets the relation of this BusinessSummary.


        :param relation: The relation of this BusinessSummary.
        :type relation: Relationship
        """

        self._relation = relation

    @property
    def city(self) -> City:
        """Gets the city of this BusinessSummary.


        :return: The city of this BusinessSummary.
        :rtype: City
        """
        return self._city

    @city.setter
    def city(self, city: City):
        """Sets the city of this BusinessSummary.


        :param city: The city of this BusinessSummary.
        :type city: City
        """

        self._city = city

    @property
    def city_pin(self) -> PinCode:
        """Gets the city_pin of this BusinessSummary.


        :return: The city_pin of this BusinessSummary.
        :rtype: PinCode
        """
        return self._city_pin

    @city_pin.setter
    def city_pin(self, city_pin: PinCode):
        """Sets the city_pin of this BusinessSummary.


        :param city_pin: The city_pin of this BusinessSummary.
        :type city_pin: PinCode
        """

        self._city_pin = city_pin
